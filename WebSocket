
import com.google.gson.Gson;
import com.neusoft.mid.amp.config.AmpSpringContextHolder;
import com.neusoft.mid.amp.controller.resource.JenkinsController;
import com.neusoft.mid.amp.service.resource.jenkins.JenkinsService;
import com.neusoft.mid.amp.service.resource.jenkins.impl.JenkinsServiceImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Component;

import javax.websocket.*;
import javax.websocket.server.ServerEndpoint;
import java.io.IOException;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.locks.ReentrantLock;


@ServerEndpoint(value = "/status") //接受websocket请求路径
@Component
public class WebSocket {
    //保存所有在线socket连接
    private static Map<String, WebSocket> webSocketMap = new ConcurrentHashMap<>();

    //当前连接（每个websocket连入都会创建一个MyWebSocket实例
    private Session session;
    private Logger log = LoggerFactory.getLogger(this.getClass());
    private static final Gson gson = new Gson();

    private volatile Set<String> nameSet;

    //处理连接建立
    @OnOpen
    public void onOpen(Session session) throws IOException, InterruptedException {
        this.session = session;
        log.info("连接上了{}",session);
    }

    //接受消息
    @OnMessage
    public void onMessage(String message, Session session) throws IOException, InterruptedException {
        if(message.equals("{\"test\":\"12345\"}"))
            return;
        log.info("收到消息{}",message);
        JenkinsService jenkinsService=AmpSpringContextHolder.getBean(JenkinsServiceImpl.class);
        String status="BUILDING";
        Thread.sleep(5000);
        while(status.equals("BUILDING")){
            Thread.sleep(8000);
            log.info(message);
            status=jenkinsService.queryStatus(message);
            log.info("查询状态{}",status);

        }
        JenkinsController.JobInfo jobInfo=new JenkinsController.JobInfo();
        JenkinsController.Info info = jenkinsService.queryInfo(message);
        BeanUtils.copyProperties(info,jobInfo);
        jobInfo.setJobStatus(status);
        sendMessage(gson.toJson(jobInfo));
    }

    //处理错误
    @OnError
    public void onError(Throwable error, Session session) {
        log.info("发生错误{},{}", session.getId(), error.getMessage());
    }

    //处理连接关闭
    @OnClose
    public void onClose() {
        webSocketMap.remove(this.session.getId());
        log.info("连接关闭:{}", this.session.getId());
    }

    //群发消息

    //发送消息
    public void sendMessage(String message) throws IOException {
        log.info("发送消息{}",message);
        this.session.getBasicRemote().sendText(message);
    }

    //广播消息
    public static void broadcast(String message) {
        WebSocket.webSocketMap.forEach((k, v) -> {
            try {
                v.sendMessage(message);
            } catch (Exception e) {
            }
        });
    }

}
